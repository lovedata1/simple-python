# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.cards = []
        self.hasAces = False

    def __str__(self):
        return str([str(c) for c in self.cards]) + "(" + str(self.get_value()) + " pt)"

    def add_card(self, card):
        self.cards.append(card)
        if card.get_rank() == 'A':
            self.hasAces = True   

    def get_value(self):
        sum_value = sum([VALUES[c.get_rank()] for c in self.cards])
        if self.hasAces and sum_value+10 <= 21:
            sum_value += 10
        return sum_value

    def draw(self, canvas, pos):
        OFFSET = 100
        if len(self.cards) > 6:
            OFFSET = 30
        elif len(self.cards) > 5:
            OFFSET = 80
        added_offset = 0
        for c in self.cards:
            c.draw(canvas, [pos[0]+added_offset, pos[1]]) 
            added_offset += OFFSET
                            
# define deck class 
class Deck:
    def __init__(self):
        self.cards = []
        for s in SUITS:
            for r in RANKS:
                self.cards.append(Card(s,r))

    def shuffle(self):
        random.shuffle(self.cards)

    def deal_card(self):
        return self.cards.pop()
    
    def __str__(self):
        return str(len(self.cards)) + " Cards, " + str([str(self.cards[i]) for i in range(0,5)])


#define event handlers for buttons
def deal():
    global outcome, in_play
    global deck, player, dealer, score
    # your code goes here   
    if in_play:
        score -= 1
    in_play = True
    outcome = ""
    deck = Deck()
    player = Hand()
    dealer = Hand()
    deck.shuffle()
    player.add_card(deck.deal_card())
    player.add_card(deck.deal_card())
    dealer.add_card(deck.deal_card())
    dealer.add_card(deck.deal_card())

def hit():
    global player, deck, outcome, score, in_play
    # if the hand is in play, hit the player
    if not in_play:
        return
    
    if player.get_value() <= 21:
        player.add_card(deck.deal_card())
        
    # if busted, assign a message to outcome, update in_play and score
    if player.get_value() > 21:
        outcome = "You went bust and lose."
        score -= 1
        in_play = False
        print "Player busting " + str(player), score   
       
def stand():
    global dealer, outcome, in_play, score
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if not in_play:
        return
    while dealer.get_value() < 17:
        dealer.add_card(deck.deal_card())
    # assign a message to outcome, update in_play and score 
    if dealer.get_value() > 21:
        outcome = "Dealer went bust and you win."
        score += 1
    elif dealer.get_value() < player.get_value():
        outcome = "You win."
        score += 1
    else:
        outcome = "You lose."
        score -= 1
   
    print "D" + str(dealer), "P" + str(player), score    
    in_play = False

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    
    canvas.draw_text("Blackjack", (100,100), 48,"White", 'sans-serif')
    canvas.draw_text("Score "+str(score), (350, 100), 36, "Black", 'sans-serif' )
    canvas.draw_text("Dealer", (50, 200), 36, "Black", 'sans-serif')
    canvas.draw_text(outcome, (200, 200), 28, "Black", 'sans-serif')
    canvas.draw_text("Player", (50, 400), 36, "Black", 'sans-serif')
    if in_play:
        canvas.draw_text("Hit or Stand?", (220, 400), 30, "White", 'sans-serif')
    else:
        canvas.draw_text("New Deal?", (220, 400), 30, "Black", 'sans-serif')
    
    dealer.draw(canvas, (50,220))
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, 
                          (51+CARD_BACK_CENTER[0], 221+CARD_BACK_CENTER[1]) , CARD_SIZE)
    player.draw(canvas, (50,420))


# initialization frame
frame = simplegui.create_frame("BLACKJACK", 600, 600)
frame.set_canvas_background("Crimson")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric


